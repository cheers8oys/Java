package StartingJava;

public class Programing_Language {

    /*
    [프로그래밍 언어]

    프로그래밍 언어는 컴퓨터가 이해할 수 있는 명령을 작성하기 위한 도구를 말한다.
    컴퓨터는 0과 1만 이해할 수 있고, 사람의 말은 이해할 수 없다.
    따라서 자바와 같은 프로그래밍 언어를 사용해야 한다. 이런 프로그래밍 언어들은 기계어로 바뀌어
    컴퓨터에 전달된다. 프로그래밍 언어는 사람의 말에 가까운지, 기계어에 가까운지에 따라 크게 고급 언어,
    어셈블리어, 기계어로 나뉜다.

    프로그래밍언어를 기계어로 변환하는 과정이 '컴파일러'이다.
     */


    /*
    [모든 컴퓨터는 똑같은 기계어를 사용할까?]

    - 운영체제마다 다르다!
    윈도우와 맥은 서로 다른 기계어를 사용한다. 따라서 동일한 고급 언어로 작성된 프로그램이라
    하더라도 다른 플랫폼상에서 동작하도록 하기 위해서는 다른 컴파일러를 사용해야 한다.
    이러한 점을 해결한 자바의 '플랫폼 독립성'이 자바의 큰 장점 중 하나이다.
     */

    /*
     [자바의 플랫폼 독립성]

     플랫폼 종속성의 대표적인 예로는 윈도우, 맥, 리눅스 운영체제의 대표적인 실행 파일
     exe, app, sh을 들 수 있다. 실행 파일은 일종의 '기계어 집합'이다.
     즉, 컴퓨터가 알아들을 수 있는 명령어들의 집합인 셈이다. 따라서 윈도우가 아닌 운영체제에서는
     exe 파일은 동작하지 않는다.

     하지만 자바는 Write Once, Run Anywhere의 좌우명에 맞게 모든
     운영체제에서 실행이 가능한데 이것은 바로 자바 가상 머신 덕분이다.

     다양한 플랫폼 위에 각 운영체제에 맞는 자바 가상 머신이라는 도구를 설치하고 가상 머신을 이용해
     어떤 플랫폼에서도 .class 파일을 실행할 수 있는 것이다.
     */

    /*
    [자바 개발 도구와 자바 실행 환경]

   JDK는 말 그대로 자바를 이용해 프로그램을 개발하는 데 필요한 도구를 모아 둔 집합이라 생각하면 된다.

   JRE는 완성된 프로그램을 실행하는 데 필요한 환경을 말한다.
   즉, JDK를 가져와 프로그램을 완성하고 JRE 위에서 실행하면 프로그램이 돌아가는 것이다.

   JDK안에 JRE가 포함되어 있고 JRE안에 JVM이 포함되어 있다.
     */

    /*
    자바 프로그램의 기본 구조

    [자바 소스 코드의 실행 과정]

    1. 소스코드를 작성하고 컴파일하면 자바 가상 머신상에서 동작하는 바이트 코드 생성
    2. 소스 파일과 바이트 코드는 각각 프로젝트 내의 src 폴더와 bin 폴더 안에 위치
    3. 바이트 코드 실행하면 자바 가상 머신은 운영체제에서 메모리를 할당받아 자바 프로그램 실행

    [자바 가상 머신이 할당받은 메모리 영역]
    메모리를 효율적으로 관리하기 위해 크게 메서드 영역, 스택 영역, 힙 영역으로 나눠 사용
    메모리의 메서드 영역은 클래스 영역, 정적 영역, 상수 영역이라고도 부름

    메모리 할당 이후 실행 파일인 바이트 코드는 메모리의 메서드 영역에 로드되고 이후 클래스 내에
    포함돼 잇는 main() 메서드를 실행하는 것이 자바 가상 머신의 역할이다.

    [클래스 선언부]

    소스파일안에는 여러개의 클래스가 존재할 수 있지만 단 하나의 클래스에만 public을 붙여야 한다.
    그리고 또한 public을 붙인 클래스 이름과 소스파일의 이름을 동일하게 해야 한다.

    why?
    1. 자바 컴파일러가 소스를 쉽게 찾고 관리할 수 있도록 하기 위함입니다.
    2. 여러 개의 public 클래스를 한 파일에 두지 못하게 하여, 코드의 명확성과 관리성을 높여줍니다.





     */
}
