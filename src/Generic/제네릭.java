package Generic;

public class 제네릭 {

    /*
    [제네릭 클래스와 제네릭 인터페이스]

    클래스나 인터페이스를 내부 멤버에서 활용하는 클래스를 작성하고자 할 때는 제공되는 클래스나
    인터페이스의 다양성 만큼이나 많은가짓수의 클래스를 생성해야 한다.

    또한 동일한 이름의 메서드가 다양한 타입의 입력매개변수를 가질 수 있도록 하려면 고려하는
    입력매개변수 타입의 수만큼 오버로딩을 수행해야 한다.

    이러한 비효율성을 한 번에 해결하는 데 필요한 문법 요소가 바로 제네릭이다.

    [제네릭 문법]

    제네릭을 사용하면 모든 타입의 상품을 저장할 수 있으면서도 잘못된 캐스팅을 할 때 문법 오류를
    발생시켜 잘못된 캐스팅으로 발생하 수 있는 문제를 사전에 예방할 수 있다.
    이를 강한 타입 체크라고 한다.

    - 제네릭 클래스와 제네릭 인터페이스 정의하기
    접근 지정자 class 클래스명<K, V>{

    }

    여기서 제네릭 타입 변수명은 사용자가 임의로 지정할 수 있지만, 일반적으로 영문 대문자 한 글자를 사용한다.

    -제네릭 타입 변수
    T : 타입(Type)
    K : 키(Key)
    V : 값(Value)
    N : 숫자(Number)
    E : 원소(Element)



     */
}
